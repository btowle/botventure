#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.dirname(__FILE__))
$LOAD_PATH.unshift(File.dirname(__FILE__) + "/../../lib/ruby")
$LOAD_PATH.unshift(File.dirname(__FILE__) + "/../data")

require 'botventure'
require 'fileutils'
require 'optparse'
require 'ostruct'

def write_progress_file(campaign, level)
  progress_file = File.new("./botventure_progress", "w")
  progress_file.puts campaign
  progress_file.puts level
  progress_file.close
end

def update_readme
  progress_file = File.open("./botventure_progress", "r")
  campaign_name = progress_file.gets.chomp
  readme_name = "#{progress_file.gets.chomp.rjust(3,'0')}.README"
  file_name = "./data/maps/#{campaign_name}/#{readme_name}"
  if File.exists? file_name then
    FileUtils.cp(file_name, "./README")
  else
    File.open("./README", "w").puts "No README for this level."
  end
end

options = {}
OptionParser.new do |opts|
  options = OpenStruct.new
  options.bot_file = "./player.rb"
  options.log_level = 2
  options.turn_limit = 1000
  options.turn_delay = -1
  options.init = false
  options.campaign = "tutorial"
  options.campaign_list = false

  opts.banner = "Usage: botventure [options]"

  opts.on("-b", "--bot FILE",
          "Use the specified file instead of player.rb.") do |file|
    options.bot_file = file;
  end

  opts.on("-l", "--log-level N", Integer,
                                  "Set the amount of output from the game.",
                                  " 0: Nothing...",
                                  " 1: and TurnNumber and Map...",
                                  " 2: and Actions... (default)",
                                  " 3: and everything else.") do |n|
    options.log_level = n;
  end

  opts.on("-t", "--turn-limit T", Integer, "Set the turn limit") do |t|
    options.turn_limit = t;
  end

  opts.on("-d", "--turn-delay D", Float, "Set the turn limit") do |d|
    options.turn_delay = d;
  end

  opts.on("-i", "--init [CampaignName]", "Create a new player in current directory.") do |campaign|
    options.init = true
    options.campaign = campaign unless campaign == nil
  end

  opts.on("-c", "--campaigns", "Lists available campaigns.") do |list|
    options.campaign_list = true
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

if options.campaign_list then
  puts "Available campaigns:"
  Dir.foreach("./data/maps"){ |name|
    next if name == "." || name == ".."
    puts name if File.directory? "./data/maps/#{name}"
  }
  puts "To Start a Campaign: botventure --init <CampaignName>"
  exit
end

if options.init then
  FileUtils.cp_r(File.dirname(__FILE__) + "/../data", ".")
  if File.file?("./player.rb") == false then
    FileUtils.cp("./data/bots/player.rb", "./player.rb")
  end
  if Dir.exists?("./data/maps/#{options.campaign}") == false then
    puts "Campaign '#{options.campaign}' does not exist. Init failed."
    exit
  end
  write_progress_file(options.campaign, "0")
  update_readme
  puts "Initialized. View 'README' for instructions."
  exit
end

if !File.file? "./botventure_progress" then
  puts "No botventure_progress found. Did you forget to 'botventure --init' ?"
  exit
end

if !Dir.exists? "./data/maps/#{options.campaign}" then
  puts "Campaign in botventure_progress does not exist"
  exit
end

if !File.file? options.bot_file then
  puts "No player.rb found. Did you forget to 'botventure --init' ?"
  exit
end
require options.bot_file

progress_file = File.open("./botventure_progress", "r")
campaign_name = progress_file.gets.chomp
map_number = progress_file.gets.chomp.to_i
map_name = "#{map_number.to_s.rjust(3,'0')}.map"
progress_file.close

server = Botventure::GameServer.new
server.log_level(options.log_level)
      .turn_limit(options.turn_limit)
      .campaign(campaign_name)
      .map(map_name).start!

player = Player.new

bot = Botventure::Robot.new
bot.connect!

while bot.is_connected? && bot.is_playing? && !server.disconnected? do
  current_turn = bot.turn
  player.do_turn(bot)
  if bot.turn == current_turn then
    puts "You must take exactly one action every turn. (Use bot.wait to do nothing.)"
    break
  end
  if bot.turn > current_turn + 1 then
    puts "You must take exactly one action every turn. (You performed #{bot.turn - current_turn}.)"
    break
  end
  sleep options.turn_delay unless options.turn_delay <= 0
end

if bot.is_winner? then
  puts "You beat level #{map_number}!"
  map_file = "./data/maps/#{campaign_name}/" +
              "#{(map_number + 1).to_s.rjust(3,'0')}.map"
  if File.file? map_file then
    write_progress_file(campaign_name, map_number + 1)
    update_readme
    puts "README and progress updated for next level."
  else
    puts "You beat the the #{campaign_name} campaign!"
  end
else
  puts "You lose!"
end

bot.disconnect!
server.stop!
