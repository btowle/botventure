#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.dirname(__FILE__))
$LOAD_PATH.unshift(File.dirname(__FILE__) + "/../../lib/ruby")
$LOAD_PATH.unshift(File.dirname(__FILE__) + "/../data")

require 'botventure'
require 'fileutils'
require 'optparse'
require 'ostruct'

options = {}
OptionParser.new do |opts|
  options = OpenStruct.new
  options.bot_file = "./player.rb"
  options.log_level = 2
  options.turn_limit = 1000
  options.turn_delay = 0.5
  options.init = false

  opts.banner = "Usage: botventure [options]"

  opts.on("-b", "--bot FILE",
          "Use the specified file instead of player.rb.") do |file|
    options.bot_file = file;
  end

  opts.on("-l", "--log-level N", "Set the amount of output from the game.",
                                  " 0: Nothing...",
                                  " 1: and TurnNumber and Map...",
                                  " 2: and Actions... (default)",
                                  " 3: and everything else.") do |n|
    options.log_level = n;
  end

  opts.on("-t", "--turn-limit T", "Set the turn limit") do |t|
    options.turn_limit = t;
  end

  opts.on("-i", "--init", "Create a new player in current directory.") do |init|
    options.init = init
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!

if options.init then
  if File.file? "./player.rb" then
    puts "player.rb already exists."
    exit
  end
  puts "Create new player..."
  FileUtils.cp_r(File.dirname(__FILE__) + "/../data", ".")
  FileUtils.cp("./data/bots/player.rb", "./player.rb")
  puts "Edit player.rb and re-run to play!"
  exit
end

if !File.file? options.bot_file then
  puts "No player.rb found. Did you forget to init? ('botventure --init')"
  exit
end
require options.bot_file

server = Botventure::GameServer.new
server.log_level(options.log_level)
      .turn_limit(options.turn_limit).start!

player = Player.new

bot = Botventure::Robot.new
bot.connect!

while bot.is_connected? && bot.is_playing? && !server.disconnected? do
  current_turn = bot.turn
  player.do_turn(bot)
  if bot.turn == current_turn then
    puts "You must take exactly one action every turn. (Use bot.wait to do nothing.)"
    break
  end
  if bot.turn > current_turn + 1 then
    puts "You must take exactly one action every turn. (You performed #{bot.turn - current_turn}.)"
    break
  end
  sleep options.turn_delay
end

if bot.is_winner? then
  puts "You win!"
else
  puts "You lose!"
end

bot.disconnect!
server.stop!
